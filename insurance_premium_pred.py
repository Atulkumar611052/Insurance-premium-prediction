# -*- coding: utf-8 -*-
"""Insurance premium pred.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/19_m8TAmtRlO87g7ZenepBSBqAYpeJt1P

# Import Libraries
"""

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.metrics import r2_score,mean_squared_error, mean_absolute_error
from sklearn.linear_model import LinearRegression
from sklearn.tree import DecisionTreeRegressor
from sklearn.ensemble import RandomForestRegressor
from xgboost import XGBRFRegressor
from sklearn.ensemble import RandomForestClassifier, AdaBoostClassifier, GradientBoostingClassifier, ExtraTreesClassifier

"""# Import Dataset"""

df=pd.read_csv("/content/insurance.csv")

df.head()

df.tail()

df.columns

df.shape

"""The given dataset consist of 1338 number of rowa and 7 columns"""

df.info()

"""In the given dataset Sex, Smoker and Region column is object data type"""

df.isnull()

df.isnull().sum()

"""The given data cinsist of No Null values"""

df.describe()

"""It shows the stats of data in terms of mean, median, mode, std.deviation, minimum & maximum value and also percentile distribution of data"""

df.mean()

df.median()

df.mode()

df.std()



"""# EDA

Univariate
"""

plt.figure(figsize=(16,6))
sns.set_style(style="whitegrid")
sns.distplot(df['expenses'],bins=20,color='green',kde=True)
plt.grid=True
plt.xlabel("Expenses")
plt.ylabel("Density")
plt.show()

"""Distribution of expenses is right skewed"""

plt.figure(figsize=(16,6))
sns.set_style(style="whitegrid")
sns.distplot(df['age'],kde=True,color='green',bins=20)
plt.xlabel("Age")
plt.ylabel("Density")
plt.show()

plt.figure(figsize=(16,6))
sns.histplot(x=df['region'],color='green',kde=True,bins=20)
plt.xlabel("Region")
plt.ylabel("Count")
plt.show()

plt.figure(figsize=(16,6))
sns.set_style(rc={"gridcolor": "0.5"},style="darkgrid")
sns.countplot(x=df['region'],color='green',edgecolor="red",saturation=1.5)
plt.xlabel("Region")
plt.ylabel("Count")
plt.show()

plt.figure(figsize=(16,6))
sns.distplot(x=df['bmi'],kde=True,color="Green",bins=20)
plt.xlabel("BMI")
plt.ylabel("Density")
plt.show()

plt.figure(figsize=(10,4))
sns.set_style(style='darkgrid', rc={"grid.color": ".8", "grid.linestyle": "--"})
sns.countplot(x=df['children'],palette='viridis',saturation=0.8,edgecolor="black")
plt.tight_layout()
plt.show()

# To see the comp[osition of smoker
out_df=pd.DataFrame(df.groupby("smoker")["smoker"].count())
plt.pie(out_df['smoker'],labels=['Non-Smoker','Smoker'],radius=1,autopct="%.0f%%",shadow=True,colors="green",explode=(0,0.05))
plt.show()

"""# Multivariate"""

plt.figure(figsize=(16,6))
sns.scatterplot(y=df["age"],x=df['expenses'])
plt.xlabel("Expenses")
plt.ylabel("Age")
plt.show()

"""In this graph you can see that younger applicants have lower expenses and older applicants have higher expenses."""

plt.figure(figsize=(6,3))
sns.barplot(x=df['sex'],y=df['expenses'],color='green',saturation=0.8)
plt.xlabel("Sex")
plt.ylabel("Expenses")
plt.tight_layout()
plt.show()

"""Male applicant have a bit higher expense as compared to female."""

plt.figure(figsize=(16,5))
sns.set_style(style='darkgrid', rc={"grid.color": ".8", "grid.linestyle": "--"})
sns.regplot(x=df['bmi'],y=df['expenses'],color="purple")
plt.xlabel('BMI')
plt.ylabel('Expenses')
plt.show()

"""There is a slight positive relation between BMI and expense"""

plt.figure(figsize=(16,5))
sns.set_style(style='darkgrid', rc={"grid.color": ".8", "grid.linestyle": "--"})
sns.barplot(x=df['region'],y=df['expenses'],color="purple")
plt.xlabel('BMI')
plt.ylabel('Expenses')
plt.show()

"""Applicant from southeast have higher expenses

Heat Map
"""

sns.heatmap(df)

"""# Check outlier"""

for col_name in col:
  if(df[col_name])

col=list(df.columns)
col

for column_name in col:
  if(df[column_name].dtypes=='64int' or df[column_name].dtypes=='float64'):
    plt.boxplot(df[column_name])
    plt.xlabel(column_name)
    plt.ylabel('count')
    plt.show()

"""Treating Outliers"""

Q1=df.bmi.quantile(0.25)
Q3=df.bmi.quantile(0.75)

Q1

Q3

# prompt: IQR=Q3-Q1

IQR = Q3 - Q1
IQR

Q1-IQR*1.5

Q3-1.5*IQR

sns.boxplot(df['bmi'])
plt.show()









"""# Data Preprocessing"""

df.head(2)

"""#Converting categorical column into dummy variable"""

def data2col(data,col):
  dummy=pd.get_dummies(data[col],drop_first=True)
  data.drop(col,axis=1,inplace=True)
  data=pd.concat([data,dummy],axis=1)
  return data

for i in df.columns:
  if df[i].dtype==object:
    print(i)
    df=data2col(df,i)

df.head(2)

"""# Train Test Split"""

X= df.drop('expenses',axis=1)
y=df.expenses

X_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.25,random_state=15)

X_train

X_test

y_train

y_test

"""# Model Fitting"""

score = []

"""# Linear Regression model"""



model_LR=LinearRegression()
model_LR.fit(X_train,y_train)
pred_LR=model_LR.predict(X_test)

score.append({
    "model" : 'Linear Regression',
    'r2_score' : r2_score(y_test,pred_LR)*100,
    'MS_score' : mean_squared_error(y_test,pred_LR)

})
pred=pred_LR
print("Testing R2 score :" , r2_score(y_test,pred_LR)*100)
print('MS_score :', mean_squared_error(y_test,pred_LR))

plt.figure(figsize=(10,3))
sns.scatterplot(x=pred,y=y_test)
plt.tight_layout()
plt.show()

"""# Decision Tree Regression"""

model_DT=DecisionTreeRegressor(random_state = 15)
model_DT.fit(X_train,y_train)
pred_DT=model_DT.predict(X_test)

score.append({
   'model' : 'Decision Tree Regressor',
   'r2_score' : r2_score(y_test,pred_DT)*100,
   'ms_score' : mean_squared_error(y_test,pred_DT)
})
pred=pred_DT
print("R2_score :",r2_score(y_test,pred_DT)*100,
      '\n MS_Score :', mean_squared_error(y_test,pred_DT)*100)

plt.figure(figsize=(10,3))
sns.scatterplot(x=pred,y=y_test)
plt.tight_layout()
plt.show()

"""# Random Forest Regressor"""

model_RFR=RandomForestRegressor(n_estimators=200)
model_RFR.fit(X_train,y_train)
pred_RFR=model_RFR.predict(X_test)

score.append({
    'model' : 'Random Forest Regressor',
    'r2_score' : r2_score(y_test,pred_RFR)*100,
    'ms_score' : mean_squared_error(y_test,pred_RFR)
})
pred=pred_RFR
print("R2_score :",r2_score(y_test,pred_DT)*100,
      '\n MS_Score :', mean_squared_error(y_test,pred_DT)*100)

# prompt: plt.figure(figsize=(10,3)) sns.scatterplot(x=pred,y=y_test) plt.tight_layout() plt.show()

plt.figure(figsize=(10,3))
sns.scatterplot(x=pred_RFR,y=y_test)
plt.tight_layout()
plt.show()

"""# XGB Regressor"""

model_XGB=XGBRFRegressor()
model_XGB.fit(X_train,y_train)
pred_XGB=model_XGB.predict(X_test)

score.append({
    'model' : 'XGB Regressor',
    'r2_score' : r2_score(y_test,pred_XGB)*100,
    'ms_score' : mean_squared_error(y_test,pred_XGB)
})
pred=pred_XGB
print('r2_score :' ,r2_score(y_test,pred_XGB)*100,
    '\n ms_score :',mean_squared_error(y_test,pred_XGB))

plt.figure(figsize=(10,3))
sns.scatterplot(x=pred_RFR,y=y_test)
plt.tight_layout()
plt.show()

"""# Model Evaluation"""

score=pd.DataFrame(score,columns=["model","r2_score","ms_score"])
score.sort_values("r2_score",ascending=True,inplace=True)
score

plt.figure(figsize=(10,4))
sns.barplot(x=score['model'],y=score['r2_score'],edgecolor='green')
plt.show()

plt.figure(figsize=(10,4))
sns.barplot(x=score['model'],y=score['ms_score'],edgecolor='green')
plt.show()

"""Here XG Boost regressor is the best model to fit."""





















